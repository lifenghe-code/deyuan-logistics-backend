--- # 监控中心配置
spring.boot.admin.client:
  # 增加客户端开关
  enabled: true
  url: http://localhost:8080/admin
  instance:
    service-host-type: IP
  username: admin
  password: 123456

--- # xxl-job 配置
xxl.job:
  # 执行器开关
  enabled: true
  # 调度中心地址：如调度中心集群部署存在多个地址则用逗号分隔。
  admin-addresses: http://localhost:9080/xxl-job-admin
  # 执行器通讯TOKEN：非空时启用
  access-token: default_token
  executor:
    # 执行器AppName：执行器心跳注册分组依据；为空则关闭自动注册
    appname: xxl-job-executor
    # 执行器端口号 执行器从9101开始往后写
    port: 9101
    # 执行器注册：默认IP:PORT
    address:
    # 执行器IP：默认自动获取IP
    ip:
    # 执行器运行日志文件存储磁盘路径
    logpath: ./logs/xxl-job
    # 执行器日志文件保存天数：大于3生效
    logretentiondays: 30

--- # 数据源配置
spring:
  # 数据库配置
  # todo 需替换配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/deyuan_logistics
    username: root
    password: 123456
    # 指定数据源类型
    type: com.alibaba.druid.pool.DruidDataSource
#    druid:
#      # 配置初始化大小、最小、最大
#      initial-size: 20
#      minIdle: 20
#      max-active: 200
#      # 配置获取连接等待超时的时间(单位：毫秒)
#      max-wait: 2000
#      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#      time-between-eviction-runs-millis: 2000
#      # 配置一个连接在池中最小生存的时间，单位是毫秒
#      min-evictable-idle-time-millis: 600000
#      max-evictable-idle-time-millis: 900000
#      # 用来测试连接是否可用的SQL语句,默认值每种数据库都不相同,这是mysql
#      validationQuery: select 1
#      # 应用向连接池申请连接，并且testOnBorrow为false时，连接池将会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用
#      testWhileIdle: true
#      # 如果为true，默认是false，应用向连接池申请连接时，连接池会判断这条连接是否是可用的
#      testOnBorrow: false
#      # 如果为true（默认false），当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用
#      testOnReturn: false
#      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle
#      poolPreparedStatements: true
#      # 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，
#      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，
#      # 可以把这个数值配置大一些，比如说100
#      maxOpenPreparedStatements: 20
#      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作
#      keepAlive: true
#      # Spring 监控，利用aop 对指定接口的执行时间，jdbc数进行记录
#      aop-patterns: "com.springboot.template.dao.*"
#      ########### 启用内置过滤器（第一个 stat 必须，否则监控不到SQL）##########
#      filters: stat,wall,log4j2
#      # 自己配置监控统计拦截的filter
#      filter:
#        # 开启druiddatasource的状态监控
#        stat:
#          enabled: true
#          db-type: mysql
#          # 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中
#          log-slow-sql: true
#          slow-sql-millis: 2000
#        # 日志监控，使用slf4j 进行日志输出
#        slf4j:
#          enabled: true
#          statement-log-error-enabled: true
#          statement-create-after-log-enabled: false
#          statement-close-after-log-enabled: false
#          result-set-open-after-log-enabled: false
#          result-set-close-after-log-enabled: false
#      ########## 配置WebStatFilter，用于采集web关联监控的数据 ##########
#      web-stat-filter:
#        enabled: true                   # 启动 StatFilter
#        url-pattern: /* # 过滤所有url
#        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" # 排除一些不必要的url
#        session-stat-enable: true       # 开启session统计功能
#        session-stat-max-count: 1000 # session的最大个数,默认100
#      ########## 配置StatViewServlet（监控页面），用于展示Druid的统计信息 ##########
#      stat-view-servlet:
#        enabled: true                   # 启用StatViewServlet
#        url-pattern: /druid/* # 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html
#        reset-enable: false              # 不允许清空统计数据,重新计算
#        login-username: root # 配置监控页面访问密码
#        login-password: 123
#        allow: 127.0.0.1 # 允许访问的地址，如果allow没有配置或者为空，则允许所有访问
#        deny: # 拒绝访问的地址，deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝

--- # redis 单机配置(单机与集群只能开启一个另一个需要注释掉)
spring:
  redis:
    # 地址
    host: localhost
    # 端口，默认为6379
    port: 6379
    # 数据库索引
    database: 10
    # 密码(如没有密码请注释掉)
    # password: password
    # 连接超时时间
    timeout: 10s
    # 是否开启ssl
    ssl: false

redisson:
  # redis key前缀
  keyPrefix:
  # 线程池数量
  threads: 4
  # Netty线程池数量
  nettyThreads: 8
  # 单节点配置
  singleServerConfig:
    # 客户端名称
    clientName: ${cp-mes.name}
    # 最小空闲连接数
    connectionMinimumIdleSize: 8
    # 连接池大小
    connectionPoolSize: 32
    # 连接空闲超时，单位：毫秒
    idleConnectionTimeout: 10000
    # 命令等待超时，单位：毫秒
    timeout: 3000
    # 发布和订阅连接池大小
    subscriptionConnectionPoolSize: 50
# minio
minio:
  endpoint: http://127.0.0.1:9090
  access-key: li-fh
  secret-key: minioadmin
  secure: false  # 是否使用https
  bucket-name: img
--- # mail 邮件发送
mail:
  enabled: true
  host: smtp.qq.com
  port: 465
  # 是否需要用户名密码验证
  auth: true
  # 发送方，遵循RFC-822标准
  from: xxxxx@qq.com
  # 用户名（注意：如果使用foxmail邮箱，此处user为qq号）
  user: xxxxx@qq.com
  # 密码（注意，某些邮箱需要为SMTP服务单独设置密码，详情查看相关帮助）
  pass: inyhzykwewscfihi
  # 使用 STARTTLS安全连接，STARTTLS是对纯文本通信协议的扩展。
  starttlsEnable: true
  # 使用SSL安全连接
  sslEnable: true
  # SMTP超时时长，单位毫秒，缺省值不超时
  timeout: 0
  # Socket连接超时值，单位毫秒，缺省值不超时
  connectionTimeout: 0

--- # sms 短信
sms:
  enabled: false
  # 阿里云 dysmsapi.aliyuncs.com
  # 腾讯云 sms.tencentcloudapi.com
  endpoint: "dysmsapi.aliyuncs.com"
  accessKeyId: xxxxxxx
  accessKeySecret: xxxxxx
  signName: 测试
  # 腾讯专用
  sdkAppId:
# 接口文档配置
