
# 开发环境配置
server:
  # 服务器的HTTP端口，默认为8080
  port: 8102
  servlet:
    # 应用的访问路径
    context-path: /api
  # undertow 配置
  undertow:
    # HTTP post内容的最大大小。当值为-1时，默认值为大小是无限的
    max-http-post-size: -1
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 512
    # 是否分配的直接内存
    direct-buffers: true
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
      io: 8
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
      worker: 256
--- # 数据源配置
spring:
  # 数据库配置
  # todo 需替换配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/deyuan_logistics
    username: root
    password: 123456
# 日志配置
#logging:
#  level:
#    com.monitor: @logging.level@
#    org.springframework: warn
#  config: classpath:logback.xml

knife4j:
  enable: true
  openapi:
    title: "接口文档"
    version: 1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          - com.monitor.web.controller

netty:
  host: 127.0.0.1
  port: 8000

kafka:
  bootstrap-servers: localhost:9092
  topic: netty-traffic
  enable: true
  fallback:
    directory: ./kafka_fallback
token-bucket:
  capacity: 10 # 容量
  highThreshold: 7 # 高水位
  lowThreshold: 3 # 低水位
  coolDownPeriodMs: 5000 # 冷却时间

# 全局线程池相关配置
thread-pool:
  # 是否开启线程池
  enabled: false
  # 队列最大长度
  queueCapacity: 128
  # 线程池维护线程所允许的空闲时间
  keepAliveSeconds: 300

--- # 分布式锁 lock4j 全局配置
lock4j:
  # 获取分布式锁超时时间，默认为 3000 毫秒
  acquire-timeout: 3000
  # 分布式锁的超时时间，默认为 30 秒
  expire: 30000

--- # Actuator 监控端点的配置项
management:
  health:
    rabbit:
      enabled: false
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
    logfile:
      external-file: ./logs/sys-console.log
# application.yml
logging:
  level:
    root: INFO  # 根日志级别
